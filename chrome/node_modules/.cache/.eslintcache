[{"/Users/jinhyun/Desktop/projects/reminder/chrome/src/index.js":"1","/Users/jinhyun/Desktop/projects/reminder/chrome/src/App.js":"2","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/Nav.js":"3","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Pages/Reminder.js":"4","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Pages/Main.js":"5","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Pages/Todo.js":"6","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/ReminderElement.js":"7","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoNewModal.js":"8","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoElement.js":"9","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoEditModal.js":"10","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoCountDown.js":"11","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TimeSelector2.js":"12","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TimeSelector.js":"13","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoRenderTime.js":"14"},{"size":219,"mtime":1630343594874,"results":"15","hashOfConfig":"16"},{"size":774,"mtime":1630333346246,"results":"17","hashOfConfig":"16"},{"size":565,"mtime":1630234771952,"results":"18","hashOfConfig":"16"},{"size":2510,"mtime":1630248818301,"results":"19","hashOfConfig":"16"},{"size":367,"mtime":1630234752848,"results":"20","hashOfConfig":"16"},{"size":5051,"mtime":1630250082496,"results":"21","hashOfConfig":"16"},{"size":4464,"mtime":1630237277692,"results":"22","hashOfConfig":"16"},{"size":3195,"mtime":1630244331521,"results":"23","hashOfConfig":"16"},{"size":2624,"mtime":1630327413240,"results":"24","hashOfConfig":"16"},{"size":3272,"mtime":1630239728395,"results":"25","hashOfConfig":"16"},{"size":1124,"mtime":1630344637377,"results":"26","hashOfConfig":"16"},{"size":818,"mtime":1630234763248,"results":"27","hashOfConfig":"16"},{"size":662,"mtime":1630338286082,"results":"28","hashOfConfig":"16"},{"size":1368,"mtime":1630345374464,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"5ue1j",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jinhyun/Desktop/projects/reminder/chrome/src/index.js",[],["62","63"],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/App.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/Nav.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Pages/Reminder.js",["64"],"import { useState, useEffect } from \"react\";\nimport ReminderElement from \"../Components/ReminderElement\";\nimport \"../Style/Reminder.css\";\nimport uuid from \"react-uuid\";\n\nconst Reminder = () => {\n  const dummy = [\n    {\n      id: 1,\n      name: \"물 마시기\",\n      time: 30,\n      isOn: true,\n    },\n    {\n      id: 2,\n      name: \"스트레칭\",\n      time: 60,\n      isOn: true,\n    },\n  ];\n\n  const dummyName = ['물 마시기', '비타민 먹기', '자리에서 일어나기', '기지개 펴기', '알람 확인하기', '약 먹기', '커피 마시기', '메일 확인하기', '닭가슴살 먹기', '영양제 먹기']\n\n  const [reminderList, setReminderList] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"reminderData\") === null) {\n      localStorage.setItem(\"reminderData\", JSON.stringify(dummy));\n    }\n    setReminderList(JSON.parse(localStorage.getItem(\"reminderData\")));\n  }, []);\n\n  const addReminder = () => {\n    setReminderList([\n      {\n        id: uuid(),\n        name: dummyName[Math.floor(Math.random()*10)],\n        time: 10,\n        isOn: true,\n      },\n      ...reminderList,\n    ]);\n  };\n\n  const deleteDummy = (e) => {\n    setReminderList(reminderList.filter((el) => el.id !== e.id));\n  };\n\n  const toggleHandler = (e) => {\n    // 인덱스로 접근  필터 -> 맵  사용하면 어떨가요?\n    let toggleList = reminderList.map((el) => {\n      if (e.id === el.id) {\n        el.isOn = !el.isOn;\n      }\n      return el;\n    });\n    setReminderList([...toggleList]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"reminderData\", JSON.stringify(reminderList)); //리마인더리스트를 로컬스토리지에 저장\n  }, [reminderList]);\n\n  return (\n    <div className=\"container__reminder\">\n      <h3 className=\"reminder__title\">Reminder</h3>\n      <div className=\"reminder__container__list\">\n      {reminderList.map((e, idx) => {\n        return (\n          <ReminderElement\n            idx={idx}\n            key={e.id}\n            name={e.name}\n            time={e.time}\n            isOn={e.isOn}\n            deleteDummy={() => deleteDummy(e)}\n            toggleHandler={() => toggleHandler(e)}\n            reminderList={reminderList}\n            setReminderList={setReminderList}\n          />\n        );\n      })}\n      </div>\n      <div className=\"reminder__container__add\">\n        <div className=\"reminder__add\" onClick={addReminder}>\n          <i className=\"fas fa-plus\"></i>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Reminder;\n","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Pages/Main.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Pages/Todo.js",["65"],"import { useEffect, useState } from \"react\";\nimport TodoElement from \"../Components/TodoElement\";\nimport \"../Style/Todo.css\";\nimport uuid from \"react-uuid\";\nimport TodoNewModal from \"../Components/TodoNewModal\"\n\n\nconst Todo = () => {\n  const todoDummy = [\n    {\n      id: uuid(),\n      name: '1',\n      isChecked: false,\n      checkDeadLine: true,\n      deadLine: '23:59',\n      isAlert: true,\n      isEditOpen2: false,\n    }\n    // {\n    //   id: uuid(),\n    //   name: '2',\n    //   isChecked: false,\n    //   checkDeadLine: true,\n    //   deadLine: '23:58',\n    //   isAlert: true,\n    //   isEditOpen2: false,\n    // },\n    // {\n    //   id: uuid(),\n    //   name: '3',\n    //   isChecked: false,\n    //   checkDeadLine: true,\n    //   deadLine: '22:57',\n    //   isAlert: true,\n    //   isEditOpen2: false,\n    // },\n    // {\n    //   id: uuid(),\n    //   name: '4',\n    //   isChecked: false,\n    //   checkDeadLine: true,\n    //   deadLine: '23:56',\n    //   isAlert: true,\n    //   isEditOpen2: false,\n    // },\n    // {\n    //   id: uuid(),\n    //   name: '5',\n    //   isChecked: false,\n    //   checkDeadLine: true,\n    //   deadLine: '22:55',\n    //   isAlert: true,\n    //   isEditOpen2: false,\n    // },\n  ];\n\n\n\n\n  \n\n  const [todoList, setTodoList] = useState([]);\n  const [doneList, setDoneList] = useState([]);\n  const [isNewOpen, setIsNewOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  \n  useEffect(()=>{\n    if(localStorage.getItem('todoData') === null){\n      localStorage.setItem('todoData', JSON.stringify(todoDummy));\n      localStorage.setItem('doneData', JSON.stringify([]));\n    }\n    setTodoList(JSON.parse(localStorage.getItem('todoData')));\n    setDoneList(JSON.parse(localStorage.getItem('doneData')));\n  },[])\n\n  const clearDoneList = () => {\n    setDoneList([]);\n  }\n  \n  const openNewModalHandler = () => {\n    setIsNewOpen(!isNewOpen);\n  };\n\n  const openEditModalHandler = () => {\n    setIsEditOpen(!isEditOpen);\n  }\n\n  const deleteTodoDummy = (e) => {\n    setTodoList(todoList.filter((el) => el.id !== e.id));\n  };\n\n  const deleteTodoDummy2 = (e) => {\n    setDoneList(doneList.filter((el) => el.id !== e.id))\n  }\n\n  const handleCheckChange = (check, id) => {\n    if (check) {\n      setDoneList([...doneList, ...todoList.filter((el) => el.id === id)])\n      setTodoList(todoList.filter((el) => el.id !== id))\n    }\n    else {\n      setDoneList(doneList.filter((el) => el.id !== id))\n      setTodoList([...todoList, ...doneList.filter((el) => el.id === id)])\n    }\n  }\n\n  // 로컬 스토리지와 상태 싱크 시키는 이펙트 훅\n  useEffect(()=>{\n    localStorage.setItem('todoData', JSON.stringify(todoList));\n    localStorage.setItem('doneData', JSON.stringify(doneList))\n  },[todoList, doneList])\n\n  return (\n    <div className=\"container__todo\">\n      <div className= 'title__wrapper'>\n        <h3 className=\"todo__title\">Todo List</h3>\n        <div className=\"todo__container__add\">\n          <div className=\"todo__add\" onClick={openNewModalHandler}>\n            <i className=\"fas fa-plus\"/>\n          </div>\n          <TodoNewModal openNewModalHandler={openNewModalHandler} setIsNewOpen={setIsNewOpen} isNewOpen={isNewOpen} setTodoList={setTodoList} todoList={todoList}/>\n        </div>\n      </div>\n      <div className=\"todo__list\">\n      {todoList.map((e) => {\n        return (\n          <TodoElement\n            key={e.id}\n            name={e.name}\n            id={e.id}\n            isChecked={e.isChecked}\n            todoList={todoList}\n            setTodoList={setTodoList}\n            handleCheckChange={handleCheckChange}\n            deleteTodoDummy={() => deleteTodoDummy(e)}\n            isAlert={e.isAlert}\n            deadLine={e.deadLine}\n            checkDeadLine={e.checkDeadLine}\n            openEditModalHandler={openEditModalHandler}\n            isEditOpen={isEditOpen}\n            isEditOpen2={e.isEditOpen2}\n            content={e}\n          />\n        )\n      })}\n      </div>\n      <div className='title__wrapper'>\n      <h3 className='todo__title'>Done List</h3>\n      <div className=\"todo__container__delete\">\n          <div className=\"todo__doneList__delete\" onClick={clearDoneList}>\n          <i className=\"fas fa-minus\"/>\n          </div>\n      </div>\n      </div>\n      <div className=\"todo__doneList\">\n        {doneList.map((e) => {\n          return (\n            <TodoElement\n              key={e.id}\n              id={e.id}\n              name={e.name}\n              isChecked={true}\n              todoList={todoList}\n              setTodoList={setTodoList}\n              handleCheckChange={handleCheckChange}\n              deleteTodoDummy={() => deleteTodoDummy2(e)}\n              isAlert={e.isAlert}\n              deadLine={e.deadLine}\n              checkDeadLine={e.checkDeadLine}\n              openEditModalHandler={openEditModalHandler}\n              isEditOpen={isEditOpen}\n              isEditOpen2={e.isEditOpen2}\n              content={e}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/ReminderElement.js",["66","67"],"import \"../Style/ReminderElement.css\";\nimport { useState, useRef, useEffect } from \"react\";\n\nfunction ReminderElement({\n  name,\n  time,\n  isOn,\n  deleteDummy,\n  toggleHandler,\n  reminderList,\n  setReminderList,\n  idx,\n}) {\n  const [isToggleOn, setIsToggleOn] = useState(isOn);\n  const [isEditName, setIsEditName] = useState(false);\n  const [newName, setNewName] = useState(name);\n  const [newTime, setNewTime] = useState(time);\n  const inputName = useRef(null);\n  const inputTime = useRef(null);\n\n  useEffect(() => {\n    setIsToggleOn(isOn);\n  }, [isOn]);\n\n  const [timerID, setTimerID] = useState(null);\n  useEffect(() => {\n    const timer = () => {\n      return setInterval(() => {\n        console.log(`${name} ${time}분 지났습니다.`);\n      }, time * 60000);\n    };\n\n    clearInterval(timerID);\n    if (isToggleOn) {\n      setTimerID(timer());\n    }\n  }, [name, time, isToggleOn]);\n\n  useEffect(() => {\n    if (isEditName) {\n      inputName.current.focus();\n    }\n  }, [isEditName]);\n\n  const handleEdit = (e) => {\n    if (e.target.className === \"reminder__edit__name\") {\n      setIsEditName(!isEditName);\n    }\n  };\n\n  const handleBlur = (e) => {\n    if (e.target.parentNode.className === \"reminder__edit__name\") {\n      setIsEditName(!isEditName);\n      let newList = reminderList.map((el, index) => {\n        if (index === idx) {\n          el.name = newName;\n        }\n        return el;\n      });\n      setReminderList([...newList]);\n    }\n  };\n\n  // 시간 바꿀때 리마인드 리스트에 적용되는 시점을 온블러에서 뉴 타임이 바뀔때로 바꿈.\n  useEffect(() => {\n    let newList = reminderList.map((el, index) => {\n      if (index === idx) {\n        el.time = newTime;\n      }\n      return el;\n    });\n    setReminderList([...newList]);\n  }, [newTime]);\n\n  return (\n    <div className=\"reminderElement\">\n      <div className=\"reminder__row\">\n        {/* Reminder Name */}\n        {isEditName ? (\n          <div className=\"reminder__edit__name\">\n            <input\n              type=\"text\"\n              value={newName}\n              placeholder={\"입력바람\"}\n              onBlur={(e) => handleBlur(e)}\n              ref={inputName}\n              onChange={(e) => {\n                setNewName(e.target.value);\n              }}\n              onKeyUp={(e) => {\n                if (e.key === \"Enter\") {\n                  handleBlur(e);\n                }\n              }}\n            />\n          </div>\n        ) : newName.length === 0 ? (\n          <div className=\"reminder__edit__name\" onClick={(e) => handleEdit(e)}>\n            입력바람\n          </div>\n        ) : (\n          <div className=\"reminder__edit__name\" onClick={(e) => handleEdit(e)}>\n            {name}\n          </div>\n        )}\n\n        {/* Toggle button */}\n        <div\n          className={\n            isOn\n              ? \"reminder__toggle__container\"\n              : \"reminder__toggle__container reminder__toggle__container__false\"\n          }\n          onClick={toggleHandler}\n        >\n          <div\n            className={\n              isOn\n                ? \"reminder__toggle__circle\"\n                : \"reminder__toggle__circle reminder__toggle__circle__false\"\n            }\n          ></div>\n        </div>\n      </div>\n\n      <div className=\"reminder__row\">\n        {/* Interval Setting */}\n        <div className=\"reminder__edit__time\">\n          <input\n            className=\"reminder__adjust__time\"\n            type=\"range\"\n            min=\"10\"\n            max=\"360\"\n            step=\"10\"\n            value={newTime}\n            placeholder={\"숫자입력\"}\n            ref={inputTime}\n            onChange={(e) => {\n              if (Number(e.target.value) < 0) {\n                e.target.value = \"0\";\n              }\n              setNewTime(e.target.value);\n            }}\n            onKeyUp={(e) => {\n              if (e.key === \"Enter\") {\n                handleBlur(e);\n              }\n            }}\n          />\n          {newTime >= 60 ? newTime % 60 === 0 ? <div className=\"reminder__display__time\">{newTime / 60}시간</div> : <div className=\"reminder__display__time\">{Math.floor(newTime / 60)}시간 {newTime % 60}분</div> : <div className=\"reminder__display__time\">{newTime}분</div>}\n        </div>\n\n        {/* Delete Button */}\n        <div className=\"reminder__delete\" onClick={deleteDummy}>\n          <i class=\"far fa-trash-alt\"></i>\n        </div>\n      </div>\n    </div >\n  );\n}\nexport default ReminderElement;\n","/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoNewModal.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoElement.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoEditModal.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoCountDown.js",["68"],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TimeSelector2.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TimeSelector.js",[],"/Users/jinhyun/Desktop/projects/reminder/chrome/src/Components/TodoRenderTime.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":31,"column":6,"nodeType":"75","endLine":31,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":74,"column":5,"nodeType":"75","endLine":74,"endColumn":7,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":37,"column":6,"nodeType":"75","endLine":37,"endColumn":30,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":73,"column":6,"nodeType":"75","endLine":73,"endColumn":15,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":19,"column":6,"nodeType":"75","endLine":19,"endColumn":16,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dummy'. Either include it or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has a missing dependency: 'todoDummy'. Either include it or remove the dependency array.",["88"],"React Hook useEffect has a missing dependency: 'timerID'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has missing dependencies: 'idx', 'reminderList', and 'setReminderList'. Either include them or remove the dependency array. If 'setReminderList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["90"],"React Hook useEffect has missing dependencies: 'now' and 'result'. Either include them or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [dummy]",{"range":"102","text":"103"},"Update the dependencies array to be: [todoDummy]",{"range":"104","text":"105"},"Update the dependencies array to be: [name, time, isToggleOn, timerID]",{"range":"106","text":"107"},"Update the dependencies array to be: [idx, newTime, reminderList, setReminderList]",{"range":"108","text":"109"},"Update the dependencies array to be: [deadLine, now, result]",{"range":"110","text":"111"},[788,790],"[dummy]",[1770,1772],"[todoDummy]",[852,876],"[name, time, isToggleOn, timerID]",[1698,1707],"[idx, newTime, reminderList, setReminderList]",[643,653],"[deadLine, now, result]"]